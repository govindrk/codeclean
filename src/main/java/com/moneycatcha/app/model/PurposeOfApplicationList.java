//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.08.20 at 10:22:11 PM AWST 
//
package com.moneycatcha.app.model;
import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;
@XmlType(name = "purposeOfApplicationList")
@XmlEnum
public enum PurposeOfApplicationList {
    
    @XmlEnumValue("Bridging Interest")
    BRIDGING_INTEREST("Bridging Interest"),
    
    @XmlEnumValue("Business")
    BUSINESS("Business"),
    
    @XmlEnumValue("Commercial Development")
    COMMERCIAL_DEVELOPMENT("Commercial Development"),
    
    @XmlEnumValue("Computer")
    COMPUTER("Computer"),
    
    @XmlEnumValue("Construction")
    CONSTRUCTION("Construction"),
    
    @XmlEnumValue("Consumer Goods")
    CONSUMER_GOODS("Consumer Goods"),
    
    @XmlEnumValue("Credit Card")
    CREDIT_CARD("Credit Card"),
    
    @XmlEnumValue("Debt Consolidation")
    DEBT_CONSOLIDATION("Debt Consolidation"),
    
    @XmlEnumValue("Dental Expenses")
    DENTAL_EXPENSES("Dental Expenses"),
    
    @XmlEnumValue("Deposit Account")
    DEPOSIT_ACCOUNT("Deposit Account"),
    
    @XmlEnumValue("Education Expenses")
    EDUCATION_EXPENSES("Education Expenses"),
    
    @XmlEnumValue("Holiday Expenses")
    HOLIDAY_EXPENSES("Holiday Expenses"),
    
    @XmlEnumValue("Home Deposit")
    HOME_DEPOSIT("Home Deposit"),
    
    @XmlEnumValue("Home Equity")
    HOME_EQUITY("Home Equity"),
    
    @XmlEnumValue("Home Improvements")
    HOME_IMPROVEMENTS("Home Improvements"),
    
    @XmlEnumValue("Household Items")
    HOUSEHOLD_ITEMS("Household Items"),
    
    @XmlEnumValue("Legal Fees")
    LEGAL_FEES("Legal Fees"),
    
    @XmlEnumValue("Marine")
    MARINE("Marine"),
    
    @XmlEnumValue("Marital Settlement")
    MARITAL_SETTLEMENT("Marital Settlement"),
    
    @XmlEnumValue("Medical Expenses")
    MEDICAL_EXPENSES("Medical Expenses"),
    
    @XmlEnumValue("Other")
    OTHER("Other"),
    
    @XmlEnumValue("Overdraft")
    OVERDRAFT("Overdraft"),
    
    @XmlEnumValue("Pay Taxes")
    PAY_TAXES("Pay Taxes"),
    
    @XmlEnumValue("Personal Use")
    PERSONAL_USE("Personal Use"),
    
    @XmlEnumValue("Plant and Equipment")
    PLANT_AND_EQUIPMENT("Plant and Equipment"),
    
    @XmlEnumValue("Property Settlement")
    PROPERTY_SETTLEMENT("Property Settlement"),
    
    @XmlEnumValue("Purchase Caravan")
    PURCHASE_CARAVAN("Purchase Caravan"),
    
    @XmlEnumValue("Purchase Land and Build")
    PURCHASE_LAND_AND_BUILD("Purchase Land and Build"),
    
    @XmlEnumValue("Purchase Real Estate")
    PURCHASE_REAL_ESTATE("Purchase Real Estate"),
    
    @XmlEnumValue("Purchase Shares")
    PURCHASE_SHARES("Purchase Shares"),
    
    @XmlEnumValue("Purchase Vehicle")
    PURCHASE_VEHICLE("Purchase Vehicle"),
    
    @XmlEnumValue("Recreation Expenses")
    RECREATION_EXPENSES("Recreation Expenses"),
    
    @XmlEnumValue("Refinance Home Loan")
    REFINANCE_HOME_LOAN("Refinance Home Loan"),
    
    @XmlEnumValue("Refinance Other")
    REFINANCE_OTHER("Refinance Other"),
    
    @XmlEnumValue("Refinance Vehicle Loan")
    REFINANCE_VEHICLE_LOAN("Refinance Vehicle Loan"),
    
    @XmlEnumValue("Travel Requirements")
    TRAVEL_REQUIREMENTS("Travel Requirements"),
    
    @XmlEnumValue("Vehicle Expenses")
    VEHICLE_EXPENSES("Vehicle Expenses"),
    
    @XmlEnumValue("Wedding Expenses")
    WEDDING_EXPENSES("Wedding Expenses");
    private final String value;
    PurposeOfApplicationList(String v) {
        value = v;
    }
    public String value() {
        return value;
    }
    public static PurposeOfApplicationList fromValue(String v) {
        for (PurposeOfApplicationList c: PurposeOfApplicationList.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }
}
